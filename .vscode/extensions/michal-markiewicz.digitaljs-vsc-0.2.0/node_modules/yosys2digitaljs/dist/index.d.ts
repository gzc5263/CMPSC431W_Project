#!/usr/bin/env node
declare namespace Digitaljs {
    type FilePosition = {
        line: number;
        column: number;
    };
    type SourcePosition = {
        name: string;
        from: FilePosition;
        to: FilePosition;
    };
    type MemReadPort = {
        clock_polarity?: boolean;
        enable_polarity?: boolean;
        arst_polarity?: boolean;
        srst_polarity?: boolean;
        enable_srst?: boolean;
        transparent?: boolean | boolean[];
        collision?: boolean | boolean[];
        init_value?: string;
        arst_value?: string;
        srst_value?: string;
    };
    type MemWritePort = {
        clock_polarity?: boolean;
        enable_polarity?: boolean;
        no_bit_enable?: boolean;
    };
    type Device = {
        type: string;
        source_positions?: SourcePosition[];
        [key: string]: any;
    };
    type Port = {
        id: string;
        port: string;
    };
    type Connector = {
        from: Port;
        to: Port;
        name?: string;
        source_positions?: SourcePosition[];
    };
    type Module = {
        devices: {
            [key: string]: Device;
        };
        connectors: Connector[];
    };
    type TopModule = Module & {
        subcircuits: {
            [key: string]: Module;
        };
    };
}
declare namespace Yosys {
    type BitChar = '0' | '1' | 'x';
    type Bit = number | '0' | '1' | 'x';
    type BitVector = Bit[];
    type Port = {
        direction: 'input' | 'output' | 'inout';
        bits: any;
    };
    type Parameters = {
        WIDTH?: JsonConstant;
        A_WIDTH?: JsonConstant;
        B_WIDTH?: JsonConstant;
        S_WIDTH?: JsonConstant;
        Y_WIDTH?: JsonConstant;
        A_SIGNED?: JsonConstant;
        B_SIGNED?: JsonConstant;
        CLK_POLARITY?: JsonConstant;
        EN_POLARITY?: JsonConstant;
        ARST_POLARITY?: JsonConstant;
        ARST_VALUE: JsonConstant;
        CTRL_IN_WIDTH?: JsonConstant;
        CTRL_OUT_WIDTH?: JsonConstant;
        TRANS_NUM?: JsonConstant;
        STATE_NUM?: JsonConstant;
        STATE_NUM_LOG2?: JsonConstant;
        STATE_RST?: JsonConstant;
        RD_PORTS?: JsonConstant;
        WR_PORTS?: JsonConstant;
        RD_CLK_POLARITY?: JsonConstant;
        RD_CLK_ENABLE?: JsonConstant;
        RD_CLK_TRANSPARENT?: JsonConstant;
        WR_CLK_POLARITY?: JsonConstant;
        WR_CLK_ENABLE?: JsonConstant;
        [key: string]: any;
    };
    type JsonConstant = number | string;
    type Attributes = {
        init: JsonConstant;
        [key: string]: any;
    };
    type Cell = {
        hide_name: 0 | 1;
        type: string;
        parameters: Parameters;
        attributes: Attributes;
        port_directions: {
            [key: string]: 'input' | 'output';
        };
        connections: {
            [key: string]: BitVector;
        };
    };
    type Net = {
        hide_name: 0 | 1;
        bits: BitVector;
        attributes: {
            [key: string]: string;
        };
    };
    type Module = {
        ports: {
            [key: string]: Port;
        };
        cells: {
            [key: string]: Cell;
        };
        netnames: {
            [key: string]: Net;
        };
    };
    type Output = {
        modules: {
            [key: string]: Module;
        };
    };
}
declare type ConvertOptions = {
    propagation?: number;
};
declare type Options = ConvertOptions & {
    optimize?: boolean;
    fsmexpand?: boolean;
    fsm?: boolean | "nomap";
    timeout?: number;
    lint?: boolean;
};
declare type Output = {
    output?: Digitaljs.TopModule;
    yosys_output?: any;
    yosys_stdout: string;
    yosys_stderr: string;
    lint?: LintMessage[];
};
declare type LintMessage = {
    type: string;
    file: string;
    line: number;
    column: number;
    message: string;
};
export declare function verilator_lint(filenames: string[], dirname?: string, options?: Options): Promise<LintMessage[]>;
export declare function yosys2digitaljs(obj: Yosys.Output, options?: ConvertOptions): Digitaljs.TopModule;
export declare function process(filenames: string[], dirname?: string, options?: Options): Promise<Output>;
export declare function io_ui(output: Digitaljs.Module): void;
export declare function process_files(data: {
    [key: string]: string;
}, options?: Options): Promise<Output>;
export declare function process_sv(text: string, options?: Options): Promise<Output>;
export {};
